name: build

permissions:
  contents: write

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  PROJECT: vscode-lua
  BIN_DIR: server/bin
  PKG_SUFFIX: vsix

jobs:
  compile:
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-20.04,   target: linux,   platform: linux-x64,   container: 'ubuntu:18.04' }
          - { os: ubuntu-20.04,   target: linux,   platform: linux-arm64, container: 'ubuntu:18.04' }
          - { os: macos-11,       target: darwin,  platform: darwin-x64   }
          - { os: macos-11,       target: darwin,  platform: darwin-arm64 }
          - { os: windows-latest, target: windows, platform: win32-ia32   }
          - { os: windows-latest, target: windows, platform: win32-x64    }
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
    steps:
      - name: Prepare container
        if: ${{ matrix.target == 'linux' }}
        run: |
          apt-get update
          apt-get install -y software-properties-common
          add-apt-repository -y ppa:ubuntu-toolchain-r/test # For gcc-9 and g++-9
          add-apt-repository -y ppa:git-core/ppa # For git>=2.18.
          apt-get update
          apt-get install -y sudo git gcc-9 g++-9

          apt-get install -y curl
          curl -sL https://deb.nodesource.com/setup_14.x -o /tmp/nodesource_setup.sh # For nodejs
          sudo bash /tmp/nodesource_setup.sh
          cd ~
          curl -sL https://deb.nodesource.com/setup_16.x -o /tmp/nodesource_setup.sh
          sudo bash /tmp/nodesource_setup.sh
          sudo apt install nodejs

      - name: Install aarch64-linux-gnu
        if: ${{ matrix.platform == 'linux-arm64' }}
        run: |
          apt-get update
          apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Prepare container
        if: ${{ matrix.target == 'linux' }}
        run: |
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 100

      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actboy168/setup-luamake@master

      - name: Run luamake
        id: luamake
        working-directory: ./server
        run: |
          luamake -platform ${{ matrix.platform }}
          rm -r ./build

      - name: Setting up workflow variables
        id: vars
        shell: bash
        run: |
          # Package version
          if [[ $GITHUB_REF = refs/tags/* ]]; then
            PKG_VERSION=${GITHUB_REF##*/}
          else
            PKG_VERSION=${GITHUB_SHA:0:7}
          fi

          # Package name w/ version
          PKG_BASENAME="${{ env.PROJECT }}-${PKG_VERSION}-${{ matrix.platform }}"

          # Full name of the tarball asset
          PKG_NAME="${PKG_BASENAME}.${PKG_SUFFIX}"

          echo PKG_BASENAME=${PKG_BASENAME} >> $GITHUB_OUTPUT
          echo PKG_NAME=${PKG_NAME} >> $GITHUB_OUTPUT

      - name: Compile client
        shell: bash
        run: |
          npm install -g typescript
          cd client
          npm ci
          npm run build
          cd ..

      - name: Build Addon Manager WebVue
        shell: bash
        run: |
          cd client/webvue
          npm ci
          npm run build
          cd ../..

      - name: Pack vsix
        id: pack
        shell: bash
        run: |
          npm install -g @vscode/vsce
          vsce package -o ${{ steps.vars.outputs.PKG_NAME }} -t ${{ matrix.platform }}

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.vars.outputs.PKG_BASENAME }}
          path: ${{ steps.vars.outputs.PKG_NAME }}

      - name: Publish release assets
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          files: |
            ${{ steps.vars.outputs.PKG_NAME }}

